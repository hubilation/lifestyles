# source: http://142.93.90.163:4466
# timestamp: Thu Jan 10 2019 08:14:43 GMT-0700 (US Mountain Standard Time)

type AggregateExercise {
  count: Int!
}

type AggregateSession {
  count: Int!
}

type AggregateSessionExercise {
  count: Int!
}

type AggregateSessionExerciseSet {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Exercise implements Node {
  id: ID!
  name: String!
  name_lower: String!
  muscleGroup: String
  muscleGroup_lower: String
  description: String
  setType: SetType!
}

"""A connection to a list of items."""
type ExerciseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExerciseEdge]!
  aggregate: AggregateExercise!
}

input ExerciseCreateInput {
  name: String!
  name_lower: String!
  muscleGroup: String
  muscleGroup_lower: String
  description: String
  setType: SetType!
}

input ExerciseCreateOneInput {
  create: ExerciseCreateInput
  connect: ExerciseWhereUniqueInput
}

"""An edge in a connection."""
type ExerciseEdge {
  """The item at the end of the edge."""
  node: Exercise!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ExerciseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  name_lower_ASC
  name_lower_DESC
  muscleGroup_ASC
  muscleGroup_DESC
  muscleGroup_lower_ASC
  muscleGroup_lower_DESC
  description_ASC
  description_DESC
  setType_ASC
  setType_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ExercisePreviousValues {
  id: ID!
  name: String!
  name_lower: String!
  muscleGroup: String
  muscleGroup_lower: String
  description: String
  setType: SetType!
}

type ExerciseSubscriptionPayload {
  mutation: MutationType!
  node: Exercise
  updatedFields: [String!]
  previousValues: ExercisePreviousValues
}

input ExerciseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ExerciseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExerciseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExerciseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ExerciseWhereInput
}

input ExerciseUpdateDataInput {
  name: String
  name_lower: String
  muscleGroup: String
  muscleGroup_lower: String
  description: String
  setType: SetType
}

input ExerciseUpdateInput {
  name: String
  name_lower: String
  muscleGroup: String
  muscleGroup_lower: String
  description: String
  setType: SetType
}

input ExerciseUpdateManyMutationInput {
  name: String
  name_lower: String
  muscleGroup: String
  muscleGroup_lower: String
  description: String
  setType: SetType
}

input ExerciseUpdateOneRequiredInput {
  create: ExerciseCreateInput
  connect: ExerciseWhereUniqueInput
  update: ExerciseUpdateDataInput
  upsert: ExerciseUpsertNestedInput
}

input ExerciseUpsertNestedInput {
  update: ExerciseUpdateDataInput!
  create: ExerciseCreateInput!
}

input ExerciseWhereInput {
  """Logical AND on all given filters."""
  AND: [ExerciseWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExerciseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExerciseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  name_lower: String

  """All values that are not equal to given value."""
  name_lower_not: String

  """All values that are contained in given list."""
  name_lower_in: [String!]

  """All values that are not contained in given list."""
  name_lower_not_in: [String!]

  """All values less than the given value."""
  name_lower_lt: String

  """All values less than or equal the given value."""
  name_lower_lte: String

  """All values greater than the given value."""
  name_lower_gt: String

  """All values greater than or equal the given value."""
  name_lower_gte: String

  """All values containing the given string."""
  name_lower_contains: String

  """All values not containing the given string."""
  name_lower_not_contains: String

  """All values starting with the given string."""
  name_lower_starts_with: String

  """All values not starting with the given string."""
  name_lower_not_starts_with: String

  """All values ending with the given string."""
  name_lower_ends_with: String

  """All values not ending with the given string."""
  name_lower_not_ends_with: String
  muscleGroup: String

  """All values that are not equal to given value."""
  muscleGroup_not: String

  """All values that are contained in given list."""
  muscleGroup_in: [String!]

  """All values that are not contained in given list."""
  muscleGroup_not_in: [String!]

  """All values less than the given value."""
  muscleGroup_lt: String

  """All values less than or equal the given value."""
  muscleGroup_lte: String

  """All values greater than the given value."""
  muscleGroup_gt: String

  """All values greater than or equal the given value."""
  muscleGroup_gte: String

  """All values containing the given string."""
  muscleGroup_contains: String

  """All values not containing the given string."""
  muscleGroup_not_contains: String

  """All values starting with the given string."""
  muscleGroup_starts_with: String

  """All values not starting with the given string."""
  muscleGroup_not_starts_with: String

  """All values ending with the given string."""
  muscleGroup_ends_with: String

  """All values not ending with the given string."""
  muscleGroup_not_ends_with: String
  muscleGroup_lower: String

  """All values that are not equal to given value."""
  muscleGroup_lower_not: String

  """All values that are contained in given list."""
  muscleGroup_lower_in: [String!]

  """All values that are not contained in given list."""
  muscleGroup_lower_not_in: [String!]

  """All values less than the given value."""
  muscleGroup_lower_lt: String

  """All values less than or equal the given value."""
  muscleGroup_lower_lte: String

  """All values greater than the given value."""
  muscleGroup_lower_gt: String

  """All values greater than or equal the given value."""
  muscleGroup_lower_gte: String

  """All values containing the given string."""
  muscleGroup_lower_contains: String

  """All values not containing the given string."""
  muscleGroup_lower_not_contains: String

  """All values starting with the given string."""
  muscleGroup_lower_starts_with: String

  """All values not starting with the given string."""
  muscleGroup_lower_not_starts_with: String

  """All values ending with the given string."""
  muscleGroup_lower_ends_with: String

  """All values not ending with the given string."""
  muscleGroup_lower_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  setType: SetType

  """All values that are not equal to given value."""
  setType_not: SetType

  """All values that are contained in given list."""
  setType_in: [SetType!]

  """All values that are not contained in given list."""
  setType_not_in: [SetType!]
}

input ExerciseWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createSession(data: SessionCreateInput!): Session!
  createSessionExercise(data: SessionExerciseCreateInput!): SessionExercise!
  createSessionExerciseSet(data: SessionExerciseSetCreateInput!): SessionExerciseSet!
  createExercise(data: ExerciseCreateInput!): Exercise!
  createUser(data: UserCreateInput!): User!
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateSessionExercise(data: SessionExerciseUpdateInput!, where: SessionExerciseWhereUniqueInput!): SessionExercise
  updateSessionExerciseSet(data: SessionExerciseSetUpdateInput!, where: SessionExerciseSetWhereUniqueInput!): SessionExerciseSet
  updateExercise(data: ExerciseUpdateInput!, where: ExerciseWhereUniqueInput!): Exercise
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteSessionExercise(where: SessionExerciseWhereUniqueInput!): SessionExercise
  deleteSessionExerciseSet(where: SessionExerciseSetWhereUniqueInput!): SessionExerciseSet
  deleteExercise(where: ExerciseWhereUniqueInput!): Exercise
  deleteUser(where: UserWhereUniqueInput!): User
  upsertSession(where: SessionWhereUniqueInput!, create: SessionCreateInput!, update: SessionUpdateInput!): Session!
  upsertSessionExercise(where: SessionExerciseWhereUniqueInput!, create: SessionExerciseCreateInput!, update: SessionExerciseUpdateInput!): SessionExercise!
  upsertSessionExerciseSet(where: SessionExerciseSetWhereUniqueInput!, create: SessionExerciseSetCreateInput!, update: SessionExerciseSetUpdateInput!): SessionExerciseSet!
  upsertExercise(where: ExerciseWhereUniqueInput!, create: ExerciseCreateInput!, update: ExerciseUpdateInput!): Exercise!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManySessions(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): BatchPayload!
  updateManySessionExerciseSets(data: SessionExerciseSetUpdateManyMutationInput!, where: SessionExerciseSetWhereInput): BatchPayload!
  updateManyExercises(data: ExerciseUpdateManyMutationInput!, where: ExerciseWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManySessions(where: SessionWhereInput): BatchPayload!
  deleteManySessionExercises(where: SessionExerciseWhereInput): BatchPayload!
  deleteManySessionExerciseSets(where: SessionExerciseSetWhereInput): BatchPayload!
  deleteManyExercises(where: ExerciseWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  TRAINER
}

type Query {
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  sessionExercises(where: SessionExerciseWhereInput, orderBy: SessionExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionExercise]!
  sessionExerciseSets(where: SessionExerciseSetWhereInput, orderBy: SessionExerciseSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionExerciseSet]!
  exercises(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exercise]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  session(where: SessionWhereUniqueInput!): Session
  sessionExercise(where: SessionExerciseWhereUniqueInput!): SessionExercise
  sessionExerciseSet(where: SessionExerciseSetWhereUniqueInput!): SessionExerciseSet
  exercise(where: ExerciseWhereUniqueInput!): Exercise
  user(where: UserWhereUniqueInput!): User
  sessionsConnection(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionConnection!
  sessionExercisesConnection(where: SessionExerciseWhereInput, orderBy: SessionExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionExerciseConnection!
  sessionExerciseSetsConnection(where: SessionExerciseSetWhereInput, orderBy: SessionExerciseSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionExerciseSetConnection!
  exercisesConnection(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExerciseConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Session implements Node {
  id: ID!
  user: User!
  trainer: User
  name: String
  note: String
  exercises(where: SessionExerciseWhereInput, orderBy: SessionExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionExercise!]
  createdAt: DateTime!
  completed: Boolean!
}

"""A connection to a list of items."""
type SessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SessionEdge]!
  aggregate: AggregateSession!
}

input SessionCreateInput {
  name: String
  note: String
  completed: Boolean!
  user: UserCreateOneInput!
  trainer: UserCreateOneInput
  exercises: SessionExerciseCreateManyWithoutSessionInput
}

input SessionCreateOneWithoutExercisesInput {
  create: SessionCreateWithoutExercisesInput
  connect: SessionWhereUniqueInput
}

input SessionCreateWithoutExercisesInput {
  name: String
  note: String
  completed: Boolean!
  user: UserCreateOneInput!
  trainer: UserCreateOneInput
}

"""An edge in a connection."""
type SessionEdge {
  """The item at the end of the edge."""
  node: Session!

  """A cursor for use in pagination."""
  cursor: String!
}

type SessionExercise implements Node {
  id: ID!
  session: Session!
  exercise: Exercise!
  sets(where: SessionExerciseSetWhereInput, orderBy: SessionExerciseSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionExerciseSet!]
}

"""A connection to a list of items."""
type SessionExerciseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SessionExerciseEdge]!
  aggregate: AggregateSessionExercise!
}

input SessionExerciseCreateInput {
  session: SessionCreateOneWithoutExercisesInput!
  exercise: ExerciseCreateOneInput!
  sets: SessionExerciseSetCreateManyWithoutSessionExerciseInput
}

input SessionExerciseCreateManyWithoutSessionInput {
  create: [SessionExerciseCreateWithoutSessionInput!]
  connect: [SessionExerciseWhereUniqueInput!]
}

input SessionExerciseCreateOneWithoutSetsInput {
  create: SessionExerciseCreateWithoutSetsInput
  connect: SessionExerciseWhereUniqueInput
}

input SessionExerciseCreateWithoutSessionInput {
  exercise: ExerciseCreateOneInput!
  sets: SessionExerciseSetCreateManyWithoutSessionExerciseInput
}

input SessionExerciseCreateWithoutSetsInput {
  session: SessionCreateOneWithoutExercisesInput!
  exercise: ExerciseCreateOneInput!
}

"""An edge in a connection."""
type SessionExerciseEdge {
  """The item at the end of the edge."""
  node: SessionExercise!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SessionExerciseOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SessionExercisePreviousValues {
  id: ID!
}

input SessionExerciseScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionExerciseScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionExerciseScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionExerciseScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type SessionExerciseSet implements Node {
  id: ID!
  sessionExercise: SessionExercise!
  setNumber: Int!
  amount: Int!
  type: SetType!
}

"""A connection to a list of items."""
type SessionExerciseSetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SessionExerciseSetEdge]!
  aggregate: AggregateSessionExerciseSet!
}

input SessionExerciseSetCreateInput {
  setNumber: Int!
  amount: Int!
  type: SetType!
  sessionExercise: SessionExerciseCreateOneWithoutSetsInput!
}

input SessionExerciseSetCreateManyWithoutSessionExerciseInput {
  create: [SessionExerciseSetCreateWithoutSessionExerciseInput!]
  connect: [SessionExerciseSetWhereUniqueInput!]
}

input SessionExerciseSetCreateWithoutSessionExerciseInput {
  setNumber: Int!
  amount: Int!
  type: SetType!
}

"""An edge in a connection."""
type SessionExerciseSetEdge {
  """The item at the end of the edge."""
  node: SessionExerciseSet!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SessionExerciseSetOrderByInput {
  id_ASC
  id_DESC
  setNumber_ASC
  setNumber_DESC
  amount_ASC
  amount_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SessionExerciseSetPreviousValues {
  id: ID!
  setNumber: Int!
  amount: Int!
  type: SetType!
}

input SessionExerciseSetScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionExerciseSetScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionExerciseSetScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionExerciseSetScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  setNumber: Int

  """All values that are not equal to given value."""
  setNumber_not: Int

  """All values that are contained in given list."""
  setNumber_in: [Int!]

  """All values that are not contained in given list."""
  setNumber_not_in: [Int!]

  """All values less than the given value."""
  setNumber_lt: Int

  """All values less than or equal the given value."""
  setNumber_lte: Int

  """All values greater than the given value."""
  setNumber_gt: Int

  """All values greater than or equal the given value."""
  setNumber_gte: Int
  amount: Int

  """All values that are not equal to given value."""
  amount_not: Int

  """All values that are contained in given list."""
  amount_in: [Int!]

  """All values that are not contained in given list."""
  amount_not_in: [Int!]

  """All values less than the given value."""
  amount_lt: Int

  """All values less than or equal the given value."""
  amount_lte: Int

  """All values greater than the given value."""
  amount_gt: Int

  """All values greater than or equal the given value."""
  amount_gte: Int
  type: SetType

  """All values that are not equal to given value."""
  type_not: SetType

  """All values that are contained in given list."""
  type_in: [SetType!]

  """All values that are not contained in given list."""
  type_not_in: [SetType!]
}

type SessionExerciseSetSubscriptionPayload {
  mutation: MutationType!
  node: SessionExerciseSet
  updatedFields: [String!]
  previousValues: SessionExerciseSetPreviousValues
}

input SessionExerciseSetSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionExerciseSetSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionExerciseSetSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionExerciseSetSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SessionExerciseSetWhereInput
}

input SessionExerciseSetUpdateInput {
  setNumber: Int
  amount: Int
  type: SetType
  sessionExercise: SessionExerciseUpdateOneRequiredWithoutSetsInput
}

input SessionExerciseSetUpdateManyDataInput {
  setNumber: Int
  amount: Int
  type: SetType
}

input SessionExerciseSetUpdateManyMutationInput {
  setNumber: Int
  amount: Int
  type: SetType
}

input SessionExerciseSetUpdateManyWithoutSessionExerciseInput {
  create: [SessionExerciseSetCreateWithoutSessionExerciseInput!]
  connect: [SessionExerciseSetWhereUniqueInput!]
  disconnect: [SessionExerciseSetWhereUniqueInput!]
  delete: [SessionExerciseSetWhereUniqueInput!]
  update: [SessionExerciseSetUpdateWithWhereUniqueWithoutSessionExerciseInput!]
  updateMany: [SessionExerciseSetUpdateManyWithWhereNestedInput!]
  deleteMany: [SessionExerciseSetScalarWhereInput!]
  upsert: [SessionExerciseSetUpsertWithWhereUniqueWithoutSessionExerciseInput!]
}

input SessionExerciseSetUpdateManyWithWhereNestedInput {
  where: SessionExerciseSetScalarWhereInput!
  data: SessionExerciseSetUpdateManyDataInput!
}

input SessionExerciseSetUpdateWithoutSessionExerciseDataInput {
  setNumber: Int
  amount: Int
  type: SetType
}

input SessionExerciseSetUpdateWithWhereUniqueWithoutSessionExerciseInput {
  where: SessionExerciseSetWhereUniqueInput!
  data: SessionExerciseSetUpdateWithoutSessionExerciseDataInput!
}

input SessionExerciseSetUpsertWithWhereUniqueWithoutSessionExerciseInput {
  where: SessionExerciseSetWhereUniqueInput!
  update: SessionExerciseSetUpdateWithoutSessionExerciseDataInput!
  create: SessionExerciseSetCreateWithoutSessionExerciseInput!
}

input SessionExerciseSetWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionExerciseSetWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionExerciseSetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionExerciseSetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  setNumber: Int

  """All values that are not equal to given value."""
  setNumber_not: Int

  """All values that are contained in given list."""
  setNumber_in: [Int!]

  """All values that are not contained in given list."""
  setNumber_not_in: [Int!]

  """All values less than the given value."""
  setNumber_lt: Int

  """All values less than or equal the given value."""
  setNumber_lte: Int

  """All values greater than the given value."""
  setNumber_gt: Int

  """All values greater than or equal the given value."""
  setNumber_gte: Int
  amount: Int

  """All values that are not equal to given value."""
  amount_not: Int

  """All values that are contained in given list."""
  amount_in: [Int!]

  """All values that are not contained in given list."""
  amount_not_in: [Int!]

  """All values less than the given value."""
  amount_lt: Int

  """All values less than or equal the given value."""
  amount_lte: Int

  """All values greater than the given value."""
  amount_gt: Int

  """All values greater than or equal the given value."""
  amount_gte: Int
  type: SetType

  """All values that are not equal to given value."""
  type_not: SetType

  """All values that are contained in given list."""
  type_in: [SetType!]

  """All values that are not contained in given list."""
  type_not_in: [SetType!]
  sessionExercise: SessionExerciseWhereInput
}

input SessionExerciseSetWhereUniqueInput {
  id: ID
}

type SessionExerciseSubscriptionPayload {
  mutation: MutationType!
  node: SessionExercise
  updatedFields: [String!]
  previousValues: SessionExercisePreviousValues
}

input SessionExerciseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionExerciseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionExerciseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionExerciseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SessionExerciseWhereInput
}

input SessionExerciseUpdateInput {
  session: SessionUpdateOneRequiredWithoutExercisesInput
  exercise: ExerciseUpdateOneRequiredInput
  sets: SessionExerciseSetUpdateManyWithoutSessionExerciseInput
}

input SessionExerciseUpdateManyWithoutSessionInput {
  create: [SessionExerciseCreateWithoutSessionInput!]
  connect: [SessionExerciseWhereUniqueInput!]
  disconnect: [SessionExerciseWhereUniqueInput!]
  delete: [SessionExerciseWhereUniqueInput!]
  update: [SessionExerciseUpdateWithWhereUniqueWithoutSessionInput!]
  deleteMany: [SessionExerciseScalarWhereInput!]
  upsert: [SessionExerciseUpsertWithWhereUniqueWithoutSessionInput!]
}

input SessionExerciseUpdateOneRequiredWithoutSetsInput {
  create: SessionExerciseCreateWithoutSetsInput
  connect: SessionExerciseWhereUniqueInput
  update: SessionExerciseUpdateWithoutSetsDataInput
  upsert: SessionExerciseUpsertWithoutSetsInput
}

input SessionExerciseUpdateWithoutSessionDataInput {
  exercise: ExerciseUpdateOneRequiredInput
  sets: SessionExerciseSetUpdateManyWithoutSessionExerciseInput
}

input SessionExerciseUpdateWithoutSetsDataInput {
  session: SessionUpdateOneRequiredWithoutExercisesInput
  exercise: ExerciseUpdateOneRequiredInput
}

input SessionExerciseUpdateWithWhereUniqueWithoutSessionInput {
  where: SessionExerciseWhereUniqueInput!
  data: SessionExerciseUpdateWithoutSessionDataInput!
}

input SessionExerciseUpsertWithoutSetsInput {
  update: SessionExerciseUpdateWithoutSetsDataInput!
  create: SessionExerciseCreateWithoutSetsInput!
}

input SessionExerciseUpsertWithWhereUniqueWithoutSessionInput {
  where: SessionExerciseWhereUniqueInput!
  update: SessionExerciseUpdateWithoutSessionDataInput!
  create: SessionExerciseCreateWithoutSessionInput!
}

input SessionExerciseWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionExerciseWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionExerciseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionExerciseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  session: SessionWhereInput
  exercise: ExerciseWhereInput
  sets_every: SessionExerciseSetWhereInput
  sets_some: SessionExerciseSetWhereInput
  sets_none: SessionExerciseSetWhereInput
}

input SessionExerciseWhereUniqueInput {
  id: ID
}

enum SessionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
  completed_ASC
  completed_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SessionPreviousValues {
  id: ID!
  name: String
  note: String
  createdAt: DateTime!
  completed: Boolean!
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: SessionPreviousValues
}

input SessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SessionWhereInput
}

input SessionUpdateInput {
  name: String
  note: String
  completed: Boolean
  user: UserUpdateOneRequiredInput
  trainer: UserUpdateOneInput
  exercises: SessionExerciseUpdateManyWithoutSessionInput
}

input SessionUpdateManyMutationInput {
  name: String
  note: String
  completed: Boolean
}

input SessionUpdateOneRequiredWithoutExercisesInput {
  create: SessionCreateWithoutExercisesInput
  connect: SessionWhereUniqueInput
  update: SessionUpdateWithoutExercisesDataInput
  upsert: SessionUpsertWithoutExercisesInput
}

input SessionUpdateWithoutExercisesDataInput {
  name: String
  note: String
  completed: Boolean
  user: UserUpdateOneRequiredInput
  trainer: UserUpdateOneInput
}

input SessionUpsertWithoutExercisesInput {
  update: SessionUpdateWithoutExercisesDataInput!
  create: SessionCreateWithoutExercisesInput!
}

input SessionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  completed: Boolean

  """All values that are not equal to given value."""
  completed_not: Boolean
  user: UserWhereInput
  trainer: UserWhereInput
  exercises_every: SessionExerciseWhereInput
  exercises_some: SessionExerciseWhereInput
  exercises_none: SessionExerciseWhereInput
}

input SessionWhereUniqueInput {
  id: ID
}

enum SetType {
  REPS
  TIME
}

type Subscription {
  session(where: SessionSubscriptionWhereInput): SessionSubscriptionPayload
  sessionExercise(where: SessionExerciseSubscriptionWhereInput): SessionExerciseSubscriptionPayload
  sessionExerciseSet(where: SessionExerciseSetSubscriptionWhereInput): SessionExerciseSetSubscriptionPayload
  exercise(where: ExerciseSubscriptionWhereInput): ExerciseSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String
  name: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String
  name: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String
  name: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  email: String
  name: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
